mask <- current.bin + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1.5,0,0)))
mask <- reclassify(mask - hurricane.dis.current, matrix(c(-1.5,0,0)))
pred.area$all$sea.dev.hurricane[i] <- cellStats(mask, mean)
# Low_26
mask <- low_26 + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1.5,0,0)))
mask <- reclassify(mask - hurricane.dis.low_26, matrix(c(-1.5,0,0)))
pred.area$all$all.low_26[i] <- cellStats(mask, mean)
# Mid_45
mask <- mid_45 + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1.5,0,0)))
mask <- reclassify(mask - hurricane.dis.mid_45, matrix(c(-1.5,0,0)))
pred.area$all$all.mid_45[i] <- cellStats(mask, mean)
# High_60
mask <- high_60 + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1.5,0,0)))
mask <- reclassify(mask - hurricane.dis.high_60, matrix(c(-1.5,0,0)))
pred.area$all$all.high_60[i] <- cellStats(mask, mean)
# Max_80
mask <- max_80 + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1.5,0,0)))
mask <- reclassify(mask - hurricane.dis.max_80, matrix(c(-1.5,0,0)))
pred.area$all$all.max_80[i] <- cellStats(mask, mean)
}
rm(low_26, mid_45, high_60, max_80, mask, dev.mask)
}
return(simulation.predictions = pred.area)
}
##########
future(forest.mod, reps = 2)
?evaluate
threshold(forest.evaluate)
threshold(forest.eval)
?threshold
#####################################
## Model simulation functions ##
## Functions to 'grow' patches
# Probability of transition
f.prob <- function(x, p.trans){
x*p.trans
}
# Selects from a binary distribution to determine transition
f.bin <- function(x){
if(!is.na(x)) x <- rbinom(1,1,x)
else x <- NA
}
# Corrects for probabilities > 1
f.correct <- function(x){
if(!is.na(x) && x > 1) x <- 1
else x
}
f.Exp <- function(map, base.map, p.trans){
mat.0 <- as.matrix(map)
map.t <- focal(map, w=matrix(1, nrow=3, ncol=3), sum, na.rm=T, pad=T)
map.t <- map.t + base.map
mat.t <- as.matrix(map.t)
mat.prob <- apply(mat.t, c(1,2), f.prob, p.trans=p.trans)
mat.cor <- mat.0 + mat.prob
mat.cor <- apply(mat.cor, c(1,2), f.correct)
mat.new <- apply(mat.cor, c(1,2), f.bin)
map.new <- raster(mat.new, xmn=xmin(map), xmx=xmax(map), ymn=ymin(map), ymx=ymax(map)) # need to add CRS to thins function if we want one
}
## Fire risk increase function
# fire.risk <- function(fire, p.trans=0.05, iterations=50,  fires = 10, threshold = 0.7, total = 40){
# rcl <- matrix(c(-1,threshold,NA,(threshold + 0.01),1.2,0), nrow=2, ncol=3, byrow=T)
# potential <- reclassify(fire, rcl)
# rnd.pts <- randomPoints(potential, fires)
# rnd.pts <- as.data.frame(rnd.pts)
# potential.pts <- rasterize(rnd.pts, potential, field = 1, background=0)
# potential.pts
# potential.pts <- potential + potential.pts
# wildfire <- f.Exp(potential.pts, potential.pts, p.trans)
# for(i in 1:iterations){
# if(cellStats(wildfire, sum) <= total) wildfire <- f.Exp(wildfire, potential.pts, p.trans)
# else wildfire <- wildfire
# }
# return(wildfire)
# }
### Hurricane function
hurricane <- function(template, p.trans=0.05, iterations=50, years = 35,  strike = 0.073, threshold = 0.7, total = rpois(300, c(2,4,10))){
total[total > 19] <- 19
canes <- strike * years
h.map <- template
projection(h.map) <- CRS("+init=epsg:4326")
h.map <- reclassify(h.map, matrix(c(0, 700, 0), nrow = 1))
potential <- h.map
for(j in 1:canes){
rnd.pts <- randomPoints(potential, 1)
rnd.pts <- as.data.frame(rnd.pts)
potential.pts <- rasterize(rnd.pts, potential, field = 1, background=0)
potential.pts
potential.pts <- potential + potential.pts
extreme <- f.Exp(potential.pts, potential.pts, p.trans)
for(i in 1:iterations){
if(cellStats(extreme, sum) <= sample(total, 1)) extreme <- f.Exp(extreme, potential.pts, p.trans)
else extreme <- extreme
}
h.map <- h.map + extreme
}
h.map[h.map > 1] <- 1
return(h.map)
}
## Development increase function
# development <- function(cov, p.trans=0.1, iterations=50,  hotels = 10, total = 40){
# rnd.pts <- randomPoints(cov, hotels)
# rnd.pts <- as.data.frame(rnd.pts)
# potential.pts <- rasterize(rnd.pts, cov, field = 1, background=0)
# potential.pts <- cov + potential.pts
# develop <- f.Exp(potential.pts, cov, p.trans)
# for(i in 1:iterations){
# if(cellStats(develop, sum) <= total) develop <- f.Exp(develop, potential.pts, p.trans)
# else develop <- develop
# }
# return(develop)
# }
###### Future scenarios function #####
climate.fun <- function(model, future.ppt){
env.vars <- data.frame("ppt.dry.month" = as.data.frame(future.ppt), "fire" = as.data.frame(fire), "aspect" = as.data.frame(aspect))
names(env.vars) <- c("ppt.dry.month", "fire", "aspect")
pred <- predict(model, newdata = env.vars, type="response")
pred.df <- data.frame(data = pred, x = coordinates(future.ppt)[,1], y = coordinates(future.ppt)[,2])
coordinates(pred.df) <- ~x+y
gridded(pred.df) <- TRUE
pred.sp <- raster(pred.df, layer='data')
return(pred.sp)
}
### Need to supply name of model from above - default predicts under all scenarios
# Threshold is equal sensitivity and specificity
future <- function(model, years = 35, sea = TRUE, storm = TRUE, develop = TRUE, climate = TRUE, all = TRUE, reps=10 , threshold = 0.52){
if(years == 35) future.ppt.dry.month <- future.ppt.dry.month.50
if(years == 55) future.ppt.dry.month <- future.ppt.dry.month.70
# Initial area predicted present
pred.current <- climate.fun(model, ppt.dry.month)
thresh.rcl <- matrix(c(-1, threshold, 0, threshold, 1.5, 1), nrow=2, ncol=3, byrow=TRUE)
current.area <- cellStats(reclassify(pred.current, thresh.rcl), mean)
# Create list to contain results
pred.area <- list(c(reps = reps, threshold = threshold, pred.area = current.area))
# Conditional statements to add elements to the list
if(climate == TRUE) pred.area$climate <- data.frame(low_26 = numeric(1), mid_45 = numeric(1), high_60 = numeric(1), max_80 = numeric(1))
if(sea == TRUE) pred.area$sea <- data.frame(sea = numeric(1), sea.low_26 = numeric(1), sea.mid_45 = numeric(1), sea.high_60 = numeric(1), sea.max_80 = numeric(1))
if(develop == TRUE) pred.area$develop <- data.frame(develop = numeric(reps), dev.low_26 = numeric(reps), dev.mid_45 = numeric(reps), dev.high_60 = numeric(reps), dev.max_80 = numeric(reps))
if(storm == TRUE) pred.area$hurricane <- data.frame(hurricane = numeric(reps), hurricane.low_26 = numeric(reps), hurricane.mid_45 = numeric(reps), hurricane.high_60 = numeric(reps), hurricane.max_80 = numeric(reps))
if(all == TRUE) pred.area$all <- data.frame(hurricane = numeric(reps), sea.dev = numeric(reps), dev.hurricane = numeric(reps), sea.dev.hurricane = numeric(reps), sea.hurricane = numeric(reps), all.low_26 = numeric(reps), all.mid_45 = numeric(reps), all.high_60 = numeric(reps), all.max_80 = numeric(reps))
#Calculate predicted areas under scenarios
#Climate - single values
if(climate == TRUE){
# Predict suitability across area
low_26 <- climate.fun(model, future.ppt.dry.month[[1]])
mid_45 <- climate.fun(model, future.ppt.dry.month[[2]])
high_60 <- climate.fun(model, future.ppt.dry.month[[3]])
max_80 <- climate.fun(model, future.ppt.dry.month[[4]])
# Calculate proportion of island predicted
pred.area$climate$low_26 <- cellStats(reclassify(low_26, thresh.rcl), mean)
pred.area$climate$mid_45 <- cellStats(reclassify(mid_45, thresh.rcl), mean)
pred.area$climate$high_60 <- cellStats(reclassify(high_60, thresh.rcl), mean)
pred.area$climate$max_80 <- cellStats(reclassify(max_80, thresh.rcl), mean)
rm(low_26, mid_45, high_60, max_80)
}
# Sea level change
if(sea == TRUE){
# Mask initial predictions by sea level change
sea.mask <- pred.current + sea.lvl
pred.area$sea$sea <- cellStats(reclassify(sea.mask, thresh.rcl), mean)
# Create future scenarios and mask by sea level
sea.map <- climate.fun(model, future.ppt.dry.month[[1]])
sea.mask <- sea.map + sea.lvl
pred.area$sea$sea.low_26 <- cellStats(reclassify(sea.mask, thresh.rcl), mean)
sea.map <- climate.fun(model, future.ppt.dry.month[[2]])
sea.mask <- sea.map + sea.lvl
pred.area$sea$sea.mid_45 <- cellStats(reclassify(sea.mask, thresh.rcl), mean)
sea.map <- climate.fun(model, future.ppt.dry.month[[3]])
sea.mask <- sea.map + sea.lvl
pred.area$sea$sea.high_60 <- cellStats(reclassify(sea.mask, thresh.rcl), mean)
sea.map <- climate.fun(model, future.ppt.dry.month[[4]])
sea.mask <- sea.map + sea.lvl
pred.area$sea$sea.max_80 <- cellStats(reclassify(sea.mask, thresh.rcl), mean)
rm(sea.map, sea.mask)
}
# Development
if(develop == TRUE){
low_26 <- climate.fun(model, future.ppt.dry.month[[1]])
mid_45 <- climate.fun(model, future.ppt.dry.month[[2]])
high_60 <- climate.fun(model, future.ppt.dry.month[[3]])
max_80 <- climate.fun(model, future.ppt.dry.month[[4]])
for(i in 1:reps){
# Simulate development with default values
setwd(paste(work, "/Climate_risk_model/Land_use", sep = ""))
dev.mask <-  raster("land.use.mask.asc")
setwd(paste(work, "/Climate_risk_model/", sep = ""))
# Use simulated development to mask climate predictions
pred.area$develop$develop[i] <- cellStats(reclassify(reclassify(pred.current, thresh.rcl) - dev.mask, matrix(c(-1.5,0,0), nrow=1, ncol=3, byrow=T) ), mean)
pred.area$develop$dev.low_26[i] <- cellStats(reclassify(reclassify(low_26, thresh.rcl) - dev.mask, matrix(c(-1.5,0,0), nrow=1, ncol=3, byrow=T)), mean)
pred.area$develop$dev.mid_45[i] <- cellStats(reclassify(reclassify(mid_45, thresh.rcl) - dev.mask, matrix(c(-1.5,0,0), nrow=1, ncol=3, byrow=T)), mean)
pred.area$develop$dev.high_60[i] <- cellStats(reclassify(reclassify(high_60, thresh.rcl) - dev.mask, matrix(c(-1.5,0,0), nrow=1, ncol=3, byrow=T)), mean)
pred.area$develop$dev.max_80[i] <- cellStats(reclassify(reclassify(max_80, thresh.rcl) - dev.mask, matrix(c(-1.5,0,0), nrow=1, ncol=3, byrow=T)), mean)
}
rm(low_26, mid_45, high_60, max_80)
}
# Hurricane
if(storm == TRUE){
low_26 <- climate.fun(model, future.ppt.dry.month[[1]])
mid_45 <- climate.fun(model, future.ppt.dry.month[[2]])
high_60 <- climate.fun(model, future.ppt.dry.month[[3]])
max_80 <- climate.fun(model, future.ppt.dry.month[[4]])
for(i in 1:reps){
# Simulate hurricane with default values
hurricane.dis.current <- hurricane(alt)
hurricane.dis.low_26 <- hurricane(alt)
hurricane.dis.mid_45 <-hurricane(alt)
hurricane.dis.high_60 <- hurricane(alt)
hurricane.dis.max_80 <- hurricane(alt)
hurricane.dis.current <- reclassify(hurricane.dis.current, matrix(c(-1,0.99999,0, 0.999999, 1, 1), nrow=2, ncol=3, byrow=T))
hurricane.dis.low_26 <- reclassify(hurricane.dis.low_26, matrix(c(-1,0.99999,0, 0.999999, 1, 1), nrow=2, ncol=3, byrow=T))
hurricane.dis.mid_45 <- reclassify(hurricane.dis.mid_45, matrix(c(-1,0.99999,0, 0.999999, 1, 1), nrow=2, ncol=3, byrow=T))
hurricane.dis.high_60 <- reclassify(hurricane.dis.high_60, matrix(c(-1,0.99999,0, 0.999999, 1, 1), nrow=2, ncol=3, byrow=T))
hurricane.dis.max_80 <- reclassify(hurricane.dis.max_80, matrix(c(-1,0.99999,0, 0.999999, 1, 1), nrow=2, ncol=3, byrow=T))
# Use simulated development to mask climate predictions
pred.area$hurricane$hurricane[i] <- cellStats(reclassify(reclassify(pred.current, thresh.rcl) - hurricane.dis.current, matrix(c(-1.5,0,0), nrow=1, ncol=3, byrow=T)), mean)
pred.area$hurricane$hurricane.low_26[i] <- cellStats(reclassify(reclassify(low_26, thresh.rcl) - hurricane.dis.low_26, matrix(c(-1.5,0,0), nrow=1, ncol=3, byrow=T)), mean)
pred.area$hurricane$hurricane.mid_45[i] <- cellStats(reclassify(reclassify(mid_45, thresh.rcl) - hurricane.dis.mid_45, matrix(c(-1.5,0,0), nrow=1, ncol=3, byrow=T)), mean)
pred.area$hurricane$hurricane.high_60[i] <- cellStats(reclassify(reclassify(high_60, thresh.rcl) - hurricane.dis.high_60, matrix(c(-1.5,0,0), nrow=1, ncol=3, byrow=T)), mean)
pred.area$hurricane$hurricane.max_80[i] <- cellStats(reclassify(reclassify(max_80, thresh.rcl) - hurricane.dis.max_80, matrix(c(-1.5,0,0), nrow=1, ncol=3, byrow=T)), mean)
}
rm(low_26, mid_45, high_60, max_80)
}
# All
if(all == TRUE){
low_26 <- climate.fun(model, future.ppt.dry.month[[1]])
mid_45 <- climate.fun(model, future.ppt.dry.month[[2]])
high_60 <- climate.fun(model, future.ppt.dry.month[[3]])
max_80 <- climate.fun(model, future.ppt.dry.month[[4]])
for(i in 1:reps){
# Reclassify prediction
current.bin <- reclassify(pred.current, thresh.rcl)
low_26 <- reclassify(low_26, thresh.rcl)
mid_45 <- reclassify(mid_45, thresh.rcl)
high_60 <- reclassify(high_60, thresh.rcl)
max_80 <- reclassify(max_80, thresh.rcl)
# Development mask
setwd(paste(work, "/Climate_risk_model/Land_use", sep = ""))
dev.mask <-  raster("land.use.mask.asc")
setwd(paste(work, "/Climate_risk_model/", sep = ""))
# Simulate hurricane with default values
hurricane.dis.current <- hurricane(alt)
hurricane.dis.low_26 <- hurricane(alt)
hurricane.dis.mid_45 <-hurricane(alt)
hurricane.dis.high_60 <- hurricane(alt)
hurricane.dis.max_80 <- hurricane(alt)
hurricane.dis.current <- reclassify(hurricane.dis.current, matrix(c(-1,0.99999,0, 0.999999, 1, 1), nrow=2, ncol=3, byrow=T))
hurricane.dis.low_26 <- reclassify(hurricane.dis.low_26, matrix(c(-1,0.99999,0, 0.999999, 1, 1), nrow=2, ncol=3, byrow=T))
hurricane.dis.mid_45 <- reclassify(hurricane.dis.mid_45, matrix(c(-1,0.99999,0, 0.999999, 1, 1), nrow=2, ncol=3, byrow=T))
hurricane.dis.high_60 <- reclassify(hurricane.dis.high_60, matrix(c(-1,0.99999,0, 0.999999, 1, 1), nrow=2, ncol=3, byrow=T))
hurricane.dis.max_80 <- reclassify(hurricane.dis.max_80, matrix(c(-1,0.99999,0, 0.999999, 1, 1), nrow=2, ncol=3, byrow=T))
# Use simulated hurricanes to mask climate predictions
pred.area$hurricane$hurricane[i] <- cellStats(reclassify(reclassify(pred.current, thresh.rcl) - hurricane.dis.current, matrix(c(-1.5,0,0), nrow=1, ncol=3, byrow=T)), mean)
pred.area$hurricane$hurricane.low_26[i] <- cellStats(reclassify(reclassify(low_26, thresh.rcl) - hurricane.dis.low_26, matrix(c(-1.5,0,0), nrow=1, ncol=3, byrow=T)), mean)
pred.area$hurricane$hurricane.mid_45[i] <- cellStats(reclassify(reclassify(mid_45, thresh.rcl) - hurricane.dis.mid_45, matrix(c(-1.5,0,0), nrow=1, ncol=3, byrow=T)), mean)
pred.area$hurricane$hurricane.high_60[i] <- cellStats(reclassify(reclassify(high_60, thresh.rcl) - hurricane.dis.high_60, matrix(c(-1.5,0,0), nrow=1, ncol=3, byrow=T)), mean)
pred.area$hurricane$hurricane.max_80[i] <- cellStats(reclassify(reclassify(max_80, thresh.rcl) - hurricane.dis.max_80, matrix(c(-1.5,0,0), nrow=1, ncol=3, byrow=T)), mean)
# Sea level and development
mask <- current.bin + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1.5,0,0)))
pred.area$all$sea.dev[i] <- cellStats(mask, mean)
# Sea level and hurricane
mask <- current.bin + sea.lvl
mask <- reclassify(mask - hurricane.dis.current, matrix(c(-1.5,0,0)))
pred.area$all$sea.hurricane[i] <- cellStats(mask, mean)
# Fire and development
mask <- reclassify(current.bin - dev.mask, matrix(c(-1.5,0,0)))
mask <- reclassify(mask - hurricane.dis.current, matrix(c(-1.5,0,0)))
pred.area$all$dev.hurricane[i] <- cellStats(mask, mean)
# Sea level and hurricane
# Current values
mask <- current.bin + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1.5,0,0)))
mask <- reclassify(mask - hurricane.dis.current, matrix(c(-1.5,0,0)))
pred.area$all$sea.dev.hurricane[i] <- cellStats(mask, mean)
# Low_26
mask <- low_26 + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1.5,0,0)))
mask <- reclassify(mask - hurricane.dis.low_26, matrix(c(-1.5,0,0)))
pred.area$all$all.low_26[i] <- cellStats(mask, mean)
# Mid_45
mask <- mid_45 + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1.5,0,0)))
mask <- reclassify(mask - hurricane.dis.mid_45, matrix(c(-1.5,0,0)))
pred.area$all$all.mid_45[i] <- cellStats(mask, mean)
# High_60
mask <- high_60 + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1.5,0,0)))
mask <- reclassify(mask - hurricane.dis.high_60, matrix(c(-1.5,0,0)))
pred.area$all$all.high_60[i] <- cellStats(mask, mean)
# Max_80
mask <- max_80 + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1.5,0,0)))
mask <- reclassify(mask - hurricane.dis.max_80, matrix(c(-1.5,0,0)))
pred.area$all$all.max_80[i] <- cellStats(mask, mean)
}
rm(low_26, mid_45, high_60, max_80, mask, dev.mask)
}
return(simulation.predictions = pred.area)
}
##########
plot(pred.sp)
plot(climate.function(forest.mod, future.ppt.dry.month.50[[2]]))
plot(climate.fun(forest.mod, future.ppt.dry.month.50[[2]]))
plot(climate.fun(forest.mod, future.ppt.dry.month.50[[4]]))
system.time(future(forest.mod, reps = 5))
system.time(f.5 <- future(forest.mod, reps = 5))
f.5
boxplot(f.5$all)
abline(f.5$[[1,3]])
abline(f.5[[1,3]])
abline(f.5[[1]][3], 0, col = "red")
library(rgdal)
library(raster)
library(sp)
library(dismo)
work <- getwd()
GRD <- getData('GADM', country='GRD', level=0)
GRD <- SpatialPolygons(list(Polygons(list(GRD@polygons[[1]]@Polygons[[8]]), ID="1")))
setwd(paste(work, "/Climate_risk_model/dem", sep = ""))
alt <- raster('GRD_alt.asc')
setwd(paste(work, "/Climate_risk_model/", sep = ""))
setwd(paste(work, "/Climate_risk_model/Future/Seventy", sep = ""))
f.clim <- stack(raster("ppt.dry.month.70.26.tif"), raster("ppt.dry.month.70.45.tif"), raster("ppt.dry.month.70.60.tif"), raster("ppt.dry.month.70.85.tif"))
f.clim <- crop(f.clim, extent(GRD))
plot(f.clim)
f.clim <- resample(f.clim, alt)
f.clim
projection(f.clim) <- CRS("+init=epsg:4326")
f.clim
writeRaster(f.clim, "ppt.dry.month.asc", bylayer = TRUE)
future.ppt.dry.month <- stack(raster("ppt.dry.month.26.asc"), raster("ppt.dry.month.45.asc"), raster("ppt.dry.month.60.asc"), raster("ppt.dry.month.85.asc"))
plot(future.ppt.dry.month)
?save
?saveObject
?ldply
??ldply
load("/run/user/1000/gvfs/sftp:host=194.82.34.4/home/mgeary/Grenada_Dove/Climate_risk_model/f.50.RData")
f.50
names(f.50)
boxplot(f.50$all)
abline(f.50[[1]][3], 0, col = "red")
boxplot(f.50$all, ylab = "Percentage area predicted present", xlab = "Scenario", las = 2)
par(mar = c(10, 8, 2,2))
boxplot(f.50$all, ylab = "Percentage area predicted present", xlab = "Scenario", las = 2)
f.50[[1]]
f.50$climate
f.50$hurricane
head(f.50$hurricane)
head(f.50$all)
load("/run/user/1000/gvfs/sftp:host=194.82.34.4/home/mgeary/Grenada_Dove/Climate_risk_model/f.70.RData")
f.50[[1]]
f.70[[1]]
names(f.50)
f.50$climate
names(f.50$climate)
vals.clim.50 <- data.frame("Scenario" = c(names(f.50[[1]]), paste(names(f.50$climate), "2050", sep = "_"), "Predicted_area" = c(f.50[[1]], f.50$climate) )
)
vals.clim.50
vals.clim.50 <- data.frame("Scenario" = c(names(f.50[[1]]), paste(names(f.50$climate), "2050", sep = "_")), "Predicted_area" = c(f.50[[1]], f.50$climate))
vals.clim.50
f.50[[1]][1,]
f.50[[1]]
sapply(f[[1]], function(x){as.numeric(x[2])})
sapply(f.50[[1]], function(x){as.numeric(x[2])})
sapply(f.50[[1]], function(x){as.numeric(x[1])})
sapply(f.50[[1]], function(x){as.numeric(x)})
unlist(f.50)
unlist(f.50)[[1]]
unlist(f.50[[1]])
unlist(f.50[[1]])[,2]
unlist(f.50[[1]])[2,]
class(unlist(f.50[[1]]))
class(unlist(f.50[[1]]))[[1]]
unlist(f.50[[1]])[[1]]
unlist(f.50[[1]])[[1:3]]
unlist(f.50[[1]])[1]
as.data.frame(f.50$climate)
as.data.frame(f.50$climate)[2,]
as.data.frame(f.50$climate)[1,]
class(as.data.frame(f.50$climate))
vals.clim.50 <- data.frame("Scenario" = c(names(f.50[[1]]), paste(names(f.50$climate), "2050", sep = "_")), "Predicted_area" = c(as.data.frame(f.50[[1]]), as.data.frame(f.50$climate)))
as.data.frame(f.50[[1]])
as.data.frame(f.50[[1]])[,1]
vals.clim.50 <- data.frame("Scenario" = c(names(f.50[[1]]), paste(names(f.50$climate), "2050", sep = "_")), "Predicted_area" = c(as.data.frame(f.50[[1]])[,1], as.data.frame(f.50$climate)))
vals.clim.50
as.data.frame(f.50$climate)
as.data.frame(f.50$climate)[,1]
as.data.frame(t(f.50$climate))[,1]
vals.clim.50 <- data.frame("Scenario" = c(names(f.50[[1]]), paste(names(f.50$climate), "2050", sep = "_")), "Predicted_area" = c(as.data.frame(f.50[[1]])[,1], as.data.frame(t(f.50$climate))[,1]))
vals.clim.50
vals.clim.70 <- data.frame("Scenario" = c(names(f.70[[1]]), paste(names(f.70$climate), "2070", sep = "_")), "Predicted_area" = c(as.data.frame(f.70[[1]])[,1], as.data.frame(t(f.70$climate))[,1]))
vals.clim.70
climate.results <- rbind(vals.clim.50, vals.clim.70[-1:3,])
climate.results <- rbind(vals.clim.50, vals.clim.70[-c(1:3),])
climate.results
write.csv(f.50$all, "All_scenarios_2050.csv")
write.csv(f.70$all, "All_scenarios_2070.csv")
?par
par(mgp = c(3, 5, 0))
boxplot(f.50$all, ylab = "Percentage area predicted present", xlab = "Scenario", las = 2)
par(mgp = c(8, 1, 0))
boxplot(f.50$all, ylab = "Percentage area predicted present", xlab = "Scenario", las = 2)
par(mgp = c(3, 1, 0))
boxplot(f.50$all, ylab = "Percentage area predicted present", las = 2)
abline(f.50[[1]][3], 0)
abline(f.50[[1]][3], 0, col = "red")
boxplot(f.70$all, ylab = "Percentage area predicted present", las = 2)
abline(f.50[[1]][3], 0, col = "red")
forest.eval
getwd()
setwd("~/Dropbox/Research/Grenada Dove/Climate_risk_model")
write.csv(climate.results, "Climate_results.csv")
?evaluate
plot(pred.sp)
plot(ppt.dry.month.70[[1]])
ls
ls()
plot(future.ppt.dry.month[[1]])
scalebar<-function(dim,coord=NA,padding=c(5,5),labels=paste(dim),...){
#defaults to a lower left hand position
padding<-padding/100
parrange<-c(par()$usr[2]-par()$usr[1],par()$usr[4]-par()$usr[3])
if(is.na(coord)) coord<-c(par()$usr[1]+(padding[1]*parrange[1]),par()$usr[3]+(padding[2]*parrange[2]))
lines(matrix(c(coord[1],coord[2],coord[1]+dim,coord[2]),byrow=T,nrow=2),...)
text(coord[1]+(0.5*dim),coord[2],labels=labels,adj=c(0.5,-0.25),...)
}
scalebar(10)
scalebar(5)
plot(future.ppt.dry.month[[1]])
scalebar(5)
scalebar(3)
plot(future.ppt.dry.month[[1]])
scalebar(0.5)
plot(future.ppt.dry.month[[1]])
scalebar(0.1)
plot(future.ppt.dry.month[[1]])
scalebar(0.05)
plot(future.ppt.dry.month[[1]])
scalebar(0.045, labels = "5 km")
# North arrow function
# May have to change positioning of lable depending on plot
northarrow <- function(loc,size,bearing=0,cols,cex=1,...) {
# checking arguments
if(missing(loc)) stop("loc is missing")
if(missing(size)) stop("size is missing")
# default colors are white and black
if(missing(cols)) cols <- rep(c("white","black"),8)
# calculating coordinates of polygons
radii <- rep(size/c(1,4,2,4),4)
x <- radii[(0:15)+1]*cos((0:15)*pi/8+bearing)+loc[1]
y <- radii[(0:15)+1]*sin((0:15)*pi/8+bearing)+loc[2]
# drawing polygons
for (i in 1:15) {
x1 <- c(x[i],x[i+1],loc[1])
y1 <- c(y[i],y[i+1],loc[2])
polygon(x1,y1,col=cols[i])
}
# drawing the last polygon
polygon(c(x[16],x[1],loc[1]),c(y[16],y[1],loc[2]),col=cols[16])
# drawing letters
b <- c("E","N","W","S")
i <- 1
text((size+par("cxy")[1])*cos(bearing+i*pi/2)+loc[1],
(size+par("cxy")[2])*sin(bearing+i*pi/2)+loc[2]-100,b[i+1],
cex=cex)
}
northarrow(-61.9, 12.02)
northarrow(2, 5)
northarrow(-61.7, 12)
northarrow(-61.7, 12.15, 3)
identify()
identify(x, y)
points(-61.9, 12.02, pch =16)
northarrow(-61.9, 12.02, 10)
northarrow(12.02, -61.9, 10)
northarrow(61.9, 12.02, 10)
library(maps)
north.arrow(-61.9, 12.02)
library(GISTools)
install.packages("GISTools")
library(GISTools)
north.arrow(-61.9, 12.02)
north.arrow(-61.9, 12.02, 3)
?north.arrow
plot(future.ppt.dry.month[[1]])
?north.arrow
north.arrow(-61.9, 12.02, 3)
plot(future.ppt.dry.month[[1]])
north.arrow(-61.9, 12.02, 10)
north.arrow(-61.9, 12.05, 10)
north.arrow(-61.9, 12.02, 0.05)
plot(future.ppt.dry.month[[1]])
north.arrow(-61.9, 12.02, 0.01)
scalebar(0.045, labels = "5 km")
north.arrow(-61.9, 12.03, 0.01)
plot(future.ppt.dry.month[[1]])
scalebar(0.045, labels = "5 km")
north.arrow(-61.9, 12.03, 0.01)
north.arrow(-61.905, 12.03, 0.01)
plot(future.ppt.dry.month[[1]])
scalebar(0.045, labels = "5 km")
north.arrow(-61.895, 12.03, 0.01)
boxplot(f.50$all, ylab = "Percentage area predicted present", las = 2)
box.labels <- c("Hurricanes", "Sea leval\n& Land use", "Hurricanes\n& Land use", "Sea level, Land use\n& Hurricanes", "Sea level\n& Hurricanes", "All rcp26", "All rcp45", "All rcp60", "All rcp85")
boxplot(f.50$all, ylab = "Percentage area predicted present", las = 2, labels = box.labels)
boxplot(f.50$all, ylab = "Percentage area predicted present", las = 2, names = box.labels)
abline(f.50[[1]][3], 0, col = "red")
?par
