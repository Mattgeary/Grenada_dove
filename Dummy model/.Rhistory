if(all == TRUE){
low_26 <- climate.fun(model, stack("Climate/low_26.grd"))
mid_45 <- climate.fun(model, stack("Climate/mid_45.grd"))
high_60 <- climate.fun(model, stack("Climate/high_60.grd"))
max_80 <- climate.fun(model, stack("Climate/max_80.grd"))
for(i in 1:reps){
# Reclassify prediction
current.bin <- reclassify(pred.current, thresh.rcl)
low_26 <- reclassify(low_26, thresh.rcl)
mid_45 <- reclassify(mid_45, thresh.rcl)
high_60 <- reclassify(high_60, thresh.rcl)
max_80 <- reclassify(max_80, thresh.rcl)
# Simulate development with default values
dev.mask <- development(cov)
# Simulate fire with default values
fire.dis <- fire.risk(cov)
fire.dis <- reclassify(fire.risk, matrix(c(-1,0.99999,0, 0.999999, 1, 1), nrow=2, ncol=3, byrow=T))
# Sea level and development
mask <- current.bin + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1,0,0)))
pred.area$all$sea.dev[i] <- cellStats(mask, sum)
# Sea level and fire
mask <- current.bin + sea.lvl
mask <- reclassify(mask - fire.dis, matrix(c(-1,0,0)))
pred.area$all$sea.fire[i] <- cellStats(mask, sum)
# Sea level, development and fire
# Current values
mask <- current.bin + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1,0,0)))
mask <- reclassify(mask - fire.dis, matrix(c(-1,0,0)))
pred.area$all$sea.dev[i] <- cellStats(mask, sum)
# Low_26
mask <- low_26 + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1,0,0)))
mask <- reclassify(mask - fire.dis, matrix(c(-1,0,0)))
pred.area$all$all.low_26[i] <- cellStats(mask, sum)
# Mid_45
mask <- mid_45 + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1,0,0)))
mask <- reclassify(mask - fire.dis, matrix(c(-1,0,0)))
pred.area$all$all.mid_45[i] <- cellStats(mask, sum)
# High_60
mask <- high_60 + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1,0,0)))
mask <- reclassify(mask - fire.dis, matrix(c(-1,0,0)))
pred.area$all$all.high_60[i] <- cellStats(mask, sum)
# Max_80
mask <- max_80 + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1,0,0)))
mask <- reclassify(mask - fire.dis, matrix(c(-1,0,0)))
pred.area$all$all.max_80[i] <- cellStats(mask, sum)
}
rm(low_26, mid_45, high_60, max_80, mask, dev.mask, fire.dis)
}
return(simulation.predictions = pred.area)
}
future(dove.avg, reps=1)
low_26 <- climate.fun(dove.avg, stack("Climate/low_26.grd"))
plot(low_26)
future(dove.avg, reps=1)
future <- function(model, sea = TRUE, develop = TRUE, fire = TRUE, climate = TRUE, all = TRUE, reps=10 , threshold = 0.7){
# Initial area predicted present
pred.current <- climate.fun(model, raster("Climate/current.grd"))
thresh.rcl <- matrix(c(-1, threshold, 0, threshold, 1.5, 1), nrow=2, ncol=3, byrow=TRUE)
current.area <- cellStats(reclassify(pred.current, thresh.rcl), sum)
# Create list to contain results
pred.area <- list(c(reps = reps, threshold = threshold, pred.area = current.area))
# Conditional statements to add elements to the list
if(climate == TRUE) pred.area$climate <- data.frame(low_26 = numeric(1), mid_45 = numeric(1), high_60 = numeric(1), max_85 = numeric(1))
if(sea == TRUE) pred.area$sea <- data.frame(sea = numeric(1), sea.low_26 = numeric(1), sea.mid_45 = numeric(1), sea.high_60 = numeric(1), sea.max_85 = numeric(reps))
if(develop == TRUE) pred.area$develop <- data.frame(develop = numeric(reps), dev.low_26 = numeric(reps), dev.mid_45 = numeric(reps), dev.high_60 = numeric(reps), dev.max_85 = numeric(reps))
if(fire == TRUE) pred.area$fire <- data.frame(fire = numeric(reps), dev.low_26 = numeric(reps), dev.mid_45 = numeric(reps), dev.high_60 = numeric(reps), dev.max_85 = numeric(reps))
if(all == TRUE) pred.area$all <- data.frame(sea.dev = numeric(reps), sea.fire = numeric(reps), dev.fire = numeric(reps), sea.dev.fire = numeric(reps), all.low_26 = numeric(reps), all.mid_45 = numeric(reps), all.high_60 = numeric(reps), all.max_85 = numeric(reps))
#Calculate predicted areas under scenarios
#Climate - single values
if(climate == TRUE){
# Predict suitability across area
low_26 <- climate.fun(model, stack("Climate/low_26.grd"))
mid_45 <- climate.fun(model, stack("Climate/mid_45.grd"))
high_60 <- climate.fun(model, stack("Climate/high_60.grd"))
max_80 <- climate.fun(model, stack("Climate/max_80.grd"))
# Calculate proportion of island predicted
pred.area$climate$low_26 <- cellStats(reclassify(low_26, thresh.rcl), sum)
pred.area$climate$mid_45 <- cellStats(reclassify(mid_45, thresh.rcl), sum)
pred.area$climate$high_60 <- cellStats(reclassify(high_60, thresh.rcl), sum)
pred.area$climate$max_80 <- cellStats(reclassify(max_80, thresh.rcl), sum)
rm(low_26, mid_45, high_60, max_80)
}
# Sea level change
if(sea == TRUE){
# Mask initial predictions by sea level change
sea.mask <- pred.current + sea.lvl
pred.area$sea$sea <- cellStats(reclassify(sea.mask, thresh.rcl), sum)
# Create future scenarios and mask by sea level
sea.map <- climate.fun(model, stack("Climate/low_26.grd"))
sea.mask <- sea.map + sea.lvl
pred.area$sea$sea.low_26 <- cellStats(reclassify(sea.mask, thresh.rcl), sum)
sea.map <- climate.fun(model, stack("Climate/mid_45.grd"))
sea.mask <- sea.map + sea.lvl
pred.area$sea$sea.mid_45 <- cellStats(reclassify(sea.mask, thresh.rcl), sum)
sea.map <- climate.fun(model, stack("Climate/high_60.grd"))
sea.mask <- sea.map + sea.lvl
pred.area$sea$sea.high_60 <- cellStats(reclassify(sea.mask, thresh.rcl), sum)
sea.map <- climate.fun(model, stack("Climate/max_80.grd"))
sea.mask <- sea.map + sea.lvl
pred.area$sea$sea.max_80 <- cellStats(reclassify(sea.mask, thresh.rcl), sum)
rm(sea.map, sea.mask)
}
# Development
if(develop == TRUE){
low_26 <- climate.fun(model, stack("Climate/low_26.grd"))
mid_45 <- climate.fun(model, stack("Climate/mid_45.grd"))
high_60 <- climate.fun(model, stack("Climate/high_60.grd"))
max_80 <- climate.fun(model, stack("Climate/max_80.grd"))
for(i in 1:reps){
# Simulate development with default values
dev.mask <- development(cov)
# Use simulated development to mask climate predictions
pred.area$develop$develop[i] <- cellStats(reclassify(reclassify(pred.current, thresh.rcl) - dev.mask, matrix(c(-1,0,0), nrow=1, ncol=3, byrow=T) ), sum)
pred.area$develop$dev.low_26[i] <- cellStats(reclassify(reclassify(low_26, thresh.rcl) - dev.mask, matrix(c(-1,0,0), nrow=1, ncol=3, byrow=T)), sum)
pred.area$develop$dev.mid_45[i] <- cellStats(reclassify(reclassify(mid_45, thresh.rcl) - dev.mask, matrix(c(-1,0,0), nrow=1, ncol=3, byrow=T)), sum)
pred.area$develop$dev.high_60[i] <- cellStats(reclassify(reclassify(high_60, thresh.rcl) - dev.mask, matrix(c(-1,0,0), nrow=1, ncol=3, byrow=T)), sum)
pred.area$develop$dev.max_80[i] <- cellStats(reclassify(reclassify(max_80, thresh.rcl) - dev.mask, matrix(c(-1,0,0), nrow=1, ncol=3, byrow=T)), sum)
}
rm(low_26, mid_45, high_60, max_80)
}
# Wildfire
if(fire == TRUE){
low_26 <- climate.fun(model, stack("Climate/low_26.grd"))
mid_45 <- climate.fun(model, stack("Climate/mid_45.grd"))
high_60 <- climate.fun(model, stack("Climate/high_60.grd"))
max_80 <- climate.fun(model, stack("Climate/max_80.grd"))
for(i in 1:reps){
# Simulate fire with default values
fire.dis <- fire.risk(cov)
fire.dis <- reclassify(fire.risk, matrix(c(-1,0.99999,0, 0.999999, 1, 1), nrow=2, ncol=3, byrow=T))
# Use simulated development to mask climate predictions
pred.area$develop$develop[i] <- cellStats(reclassify(reclassify(pred.current, thresh.rcl) - fire.risk, matrix(c(-1,0,0), nrow=1, ncol=3, byrow=T)), sum)
pred.area$develop$develop.low_26[i] <- cellStats(reclassify(reclassify(low_26, thresh.rcl) - fire.risk, matrix(c(-1,0,0), nrow=1, ncol=3, byrow=T)), sum)
pred.area$develop$develop.mid_45[i] <- cellStats(reclassify(reclassify(mid_45, thresh.rcl) - fire.risk, matrix(c(-1,0,0), nrow=1, ncol=3, byrow=T)), sum)
pred.area$develop$develop.high_60[i] <- cellStats(reclassify(reclassify(high_60, thresh.rcl) - fire.risk, matrix(c(-1,0,0), nrow=1, ncol=3, byrow=T)), sum)
pred.area$develop$develop.max_80[i] <- cellStats(reclassify(reclassify(max_80, thresh.rcl) - fire.risk, matrix(c(-1,0,0), nrow=1, ncol=3, byrow=T)), sum)
}
rm(low_26, mid_45, high_60, max_80)
}
# All
if(all == TRUE){
low_26 <- climate.fun(model, stack("Climate/low_26.grd"))
mid_45 <- climate.fun(model, stack("Climate/mid_45.grd"))
high_60 <- climate.fun(model, stack("Climate/high_60.grd"))
max_80 <- climate.fun(model, stack("Climate/max_80.grd"))
for(i in 1:reps){
# Reclassify prediction
current.bin <- reclassify(pred.current, thresh.rcl)
low_26 <- reclassify(low_26, thresh.rcl)
mid_45 <- reclassify(mid_45, thresh.rcl)
high_60 <- reclassify(high_60, thresh.rcl)
max_80 <- reclassify(max_80, thresh.rcl)
# Simulate development with default values
dev.mask <- development(cov)
# Simulate fire with default values
fire.dis <- fire.risk(cov)
fire.dis <- reclassify(fire.risk, matrix(c(-1,0.99999,0, 0.999999, 1, 1), nrow=2, ncol=3, byrow=T))
# Sea level and development
mask <- current.bin + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1,0,0)))
pred.area$all$sea.dev[i] <- cellStats(mask, sum)
# Sea level and fire
mask <- current.bin + sea.lvl
mask <- reclassify(mask - fire.dis, matrix(c(-1,0,0)))
pred.area$all$sea.fire[i] <- cellStats(mask, sum)
# Sea level, development and fire
# Current values
mask <- current.bin + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1,0,0)))
mask <- reclassify(mask - fire.dis, matrix(c(-1,0,0)))
pred.area$all$sea.dev[i] <- cellStats(mask, sum)
# Low_26
mask <- low_26 + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1,0,0)))
mask <- reclassify(mask - fire.dis, matrix(c(-1,0,0)))
pred.area$all$all.low_26[i] <- cellStats(mask, sum)
# Mid_45
mask <- mid_45 + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1,0,0)))
mask <- reclassify(mask - fire.dis, matrix(c(-1,0,0)))
pred.area$all$all.mid_45[i] <- cellStats(mask, sum)
# High_60
mask <- high_60 + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1,0,0)))
mask <- reclassify(mask - fire.dis, matrix(c(-1,0,0)))
pred.area$all$all.high_60[i] <- cellStats(mask, sum)
# Max_80
mask <- max_80 + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1,0,0)))
mask <- reclassify(mask - fire.dis, matrix(c(-1,0,0)))
pred.area$all$all.max_80[i] <- cellStats(mask, sum)
}
rm(low_26, mid_45, high_60, max_80, mask, dev.mask, fire.dis)
}
return(simulation.predictions = pred.area)
}
future(dove.avg, reps=1)
future <- function(model, sea = TRUE, develop = TRUE, fire = TRUE, climate = TRUE, all = TRUE, reps=10 , threshold = 0.7){
# Initial area predicted present
pred.current <- climate.fun(model, raster("Climate/current.grd"))
thresh.rcl <- matrix(c(-1, threshold, 0, threshold, 1.5, 1), nrow=2, ncol=3, byrow=TRUE)
current.area <- cellStats(reclassify(pred.current, thresh.rcl), sum)
# Create list to contain results
pred.area <- list(c(reps = reps, threshold = threshold, pred.area = current.area))
# Conditional statements to add elements to the list
if(climate == TRUE) pred.area$climate <- data.frame(low_26 = numeric(1), mid_45 = numeric(1), high_60 = numeric(1), max_85 = numeric(1))
if(sea == TRUE) pred.area$sea <- data.frame(sea = numeric(1), sea.low_26 = numeric(1), sea.mid_45 = numeric(1), sea.high_60 = numeric(1), sea.max_85 = numeric(reps))
if(develop == TRUE) pred.area$develop <- data.frame(develop = numeric(reps), dev.low_26 = numeric(reps), dev.mid_45 = numeric(reps), dev.high_60 = numeric(reps), dev.max_85 = numeric(reps))
if(fire == TRUE) pred.area$fire <- data.frame(fire = numeric(reps), dev.low_26 = numeric(reps), dev.mid_45 = numeric(reps), dev.high_60 = numeric(reps), dev.max_85 = numeric(reps))
if(all == TRUE) pred.area$all <- data.frame(sea.dev = numeric(reps), sea.fire = numeric(reps), dev.fire = numeric(reps), sea.dev.fire = numeric(reps), all.low_26 = numeric(reps), all.mid_45 = numeric(reps), all.high_60 = numeric(reps), all.max_85 = numeric(reps))
#Calculate predicted areas under scenarios
#Climate - single values
if(climate == TRUE){
# Predict suitability across area
low_26 <- climate.fun(model, stack("Climate/low_26.grd"))
mid_45 <- climate.fun(model, stack("Climate/mid_45.grd"))
high_60 <- climate.fun(model, stack("Climate/high_60.grd"))
max_80 <- climate.fun(model, stack("Climate/max_80.grd"))
# Calculate proportion of island predicted
pred.area$climate$low_26 <- cellStats(reclassify(low_26, thresh.rcl), sum)
pred.area$climate$mid_45 <- cellStats(reclassify(mid_45, thresh.rcl), sum)
pred.area$climate$high_60 <- cellStats(reclassify(high_60, thresh.rcl), sum)
pred.area$climate$max_80 <- cellStats(reclassify(max_80, thresh.rcl), sum)
rm(low_26, mid_45, high_60, max_80)
}
# Sea level change
if(sea == TRUE){
# Mask initial predictions by sea level change
sea.mask <- pred.current + sea.lvl
pred.area$sea$sea <- cellStats(reclassify(sea.mask, thresh.rcl), sum)
# Create future scenarios and mask by sea level
sea.map <- climate.fun(model, stack("Climate/low_26.grd"))
sea.mask <- sea.map + sea.lvl
pred.area$sea$sea.low_26 <- cellStats(reclassify(sea.mask, thresh.rcl), sum)
sea.map <- climate.fun(model, stack("Climate/mid_45.grd"))
sea.mask <- sea.map + sea.lvl
pred.area$sea$sea.mid_45 <- cellStats(reclassify(sea.mask, thresh.rcl), sum)
sea.map <- climate.fun(model, stack("Climate/high_60.grd"))
sea.mask <- sea.map + sea.lvl
pred.area$sea$sea.high_60 <- cellStats(reclassify(sea.mask, thresh.rcl), sum)
sea.map <- climate.fun(model, stack("Climate/max_80.grd"))
sea.mask <- sea.map + sea.lvl
pred.area$sea$sea.max_80 <- cellStats(reclassify(sea.mask, thresh.rcl), sum)
rm(sea.map, sea.mask)
}
# Development
if(develop == TRUE){
low_26 <- climate.fun(model, stack("Climate/low_26.grd"))
mid_45 <- climate.fun(model, stack("Climate/mid_45.grd"))
high_60 <- climate.fun(model, stack("Climate/high_60.grd"))
max_80 <- climate.fun(model, stack("Climate/max_80.grd"))
for(i in 1:reps){
# Simulate development with default values
dev.mask <- development(cov)
# Use simulated development to mask climate predictions
pred.area$develop$develop[i] <- cellStats(reclassify(reclassify(pred.current, thresh.rcl) - dev.mask, matrix(c(-1,0,0), nrow=1, ncol=3, byrow=T) ), sum)
pred.area$develop$dev.low_26[i] <- cellStats(reclassify(reclassify(low_26, thresh.rcl) - dev.mask, matrix(c(-1,0,0), nrow=1, ncol=3, byrow=T)), sum)
pred.area$develop$dev.mid_45[i] <- cellStats(reclassify(reclassify(mid_45, thresh.rcl) - dev.mask, matrix(c(-1,0,0), nrow=1, ncol=3, byrow=T)), sum)
pred.area$develop$dev.high_60[i] <- cellStats(reclassify(reclassify(high_60, thresh.rcl) - dev.mask, matrix(c(-1,0,0), nrow=1, ncol=3, byrow=T)), sum)
pred.area$develop$dev.max_80[i] <- cellStats(reclassify(reclassify(max_80, thresh.rcl) - dev.mask, matrix(c(-1,0,0), nrow=1, ncol=3, byrow=T)), sum)
}
rm(low_26, mid_45, high_60, max_80)
}
# Wildfire
if(fire == TRUE){
low_26 <- climate.fun(model, stack("Climate/low_26.grd"))
mid_45 <- climate.fun(model, stack("Climate/mid_45.grd"))
high_60 <- climate.fun(model, stack("Climate/high_60.grd"))
max_80 <- climate.fun(model, stack("Climate/max_80.grd"))
for(i in 1:reps){
# Simulate fire with default values
fire.dis <- fire.risk(cov)
fire.dis <- reclassify(fire.dis, matrix(c(-1,0.99999,0, 0.999999, 1, 1), nrow=2, ncol=3, byrow=T))
# Use simulated development to mask climate predictions
pred.area$develop$develop[i] <- cellStats(reclassify(reclassify(pred.current, thresh.rcl) - fire.dis, matrix(c(-1,0,0), nrow=1, ncol=3, byrow=T)), sum)
pred.area$develop$develop.low_26[i] <- cellStats(reclassify(reclassify(low_26, thresh.rcl) - fire.dis, matrix(c(-1,0,0), nrow=1, ncol=3, byrow=T)), sum)
pred.area$develop$develop.mid_45[i] <- cellStats(reclassify(reclassify(mid_45, thresh.rcl) - fire.dis, matrix(c(-1,0,0), nrow=1, ncol=3, byrow=T)), sum)
pred.area$develop$develop.high_60[i] <- cellStats(reclassify(reclassify(high_60, thresh.rcl) - fire.dis, matrix(c(-1,0,0), nrow=1, ncol=3, byrow=T)), sum)
pred.area$develop$develop.max_80[i] <- cellStats(reclassify(reclassify(max_80, thresh.rcl) - fire.dis, matrix(c(-1,0,0), nrow=1, ncol=3, byrow=T)), sum)
}
rm(low_26, mid_45, high_60, max_80)
}
# All
if(all == TRUE){
low_26 <- climate.fun(model, stack("Climate/low_26.grd"))
mid_45 <- climate.fun(model, stack("Climate/mid_45.grd"))
high_60 <- climate.fun(model, stack("Climate/high_60.grd"))
max_80 <- climate.fun(model, stack("Climate/max_80.grd"))
for(i in 1:reps){
# Reclassify prediction
current.bin <- reclassify(pred.current, thresh.rcl)
low_26 <- reclassify(low_26, thresh.rcl)
mid_45 <- reclassify(mid_45, thresh.rcl)
high_60 <- reclassify(high_60, thresh.rcl)
max_80 <- reclassify(max_80, thresh.rcl)
# Simulate development with default values
dev.mask <- development(cov)
# Simulate fire with default values
fire.dis <- fire.risk(cov)
fire.dis <- reclassify(fire.dis, matrix(c(-1,0.99999,0, 0.999999, 1, 1), nrow=2, ncol=3, byrow=T))
# Sea level and development
mask <- current.bin + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1,0,0)))
pred.area$all$sea.dev[i] <- cellStats(mask, sum)
# Sea level and fire
mask <- current.bin + sea.lvl
mask <- reclassify(mask - fire.dis, matrix(c(-1,0,0)))
pred.area$all$sea.fire[i] <- cellStats(mask, sum)
# Sea level, development and fire
# Current values
mask <- current.bin + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1,0,0)))
mask <- reclassify(mask - fire.dis, matrix(c(-1,0,0)))
pred.area$all$sea.dev[i] <- cellStats(mask, sum)
# Low_26
mask <- low_26 + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1,0,0)))
mask <- reclassify(mask - fire.dis, matrix(c(-1,0,0)))
pred.area$all$all.low_26[i] <- cellStats(mask, sum)
# Mid_45
mask <- mid_45 + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1,0,0)))
mask <- reclassify(mask - fire.dis, matrix(c(-1,0,0)))
pred.area$all$all.mid_45[i] <- cellStats(mask, sum)
# High_60
mask <- high_60 + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1,0,0)))
mask <- reclassify(mask - fire.dis, matrix(c(-1,0,0)))
pred.area$all$all.high_60[i] <- cellStats(mask, sum)
# Max_80
mask <- max_80 + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1,0,0)))
mask <- reclassify(mask - fire.dis, matrix(c(-1,0,0)))
pred.area$all$all.max_80[i] <- cellStats(mask, sum)
}
rm(low_26, mid_45, high_60, max_80, mask, dev.mask, fire.dis)
}
return(simulation.predictions = pred.area)
}
future(dove.avg, reps=1)
scenario <- future(dove.avg, reps=1)
scenario
thresh.rcl <- matrix(c(-1, threshold, 0, threshold, 1.5, 1), nrow=2, ncol=3, byrow=TRUE)
max_80 <- climate.fun(dove.avg, stack("Climate/max_80.grd"))
plot(max_80)
cellStats(reclassify(max_80, thresh.rcl), sum)
pa <_ reclassify(max_80, thresh.rcl)
pa <- reclassify(max_80, thresh.rcl)
thresh.rcl
thresh.rcl <- matrix(c(-1, 0.7, 0, 0.7, 1.5, 1), nrow=2, ncol=3, byrow=TRUE)
cellStats(reclassify(max_80, thresh.rcl), sum)
pa <- reclassify(max_80, thresh.rcl)
plot(pa)
pred.current <- climate.fun(model, raster("Climate/current.grd"))
pred.current <- climate.fun(dove.avg, raster("Climate/current.grd"))
current.area <- cellStats(reclassify(pred.current, thresh.rcl), sum)
current.area
plot(pred.current)
current.area <- cellStats(reclassify(pred.sp, thresh.rcl), sum)
current.area
plot(current.area)
plot(pred.sp)
future(dove.avg, reps=3)
future <- function(model, sea = TRUE, develop = TRUE, fire = TRUE, climate = TRUE, all = TRUE, reps=10 , threshold = 0.7){
# Initial area predicted present
pred.current <- climate.fun(model, raster("Climate/current.grd"))
thresh.rcl <- matrix(c(-1, threshold, 0, threshold, 1.5, 1), nrow=2, ncol=3, byrow=TRUE)
current.area <- cellStats(reclassify(pred.current, thresh.rcl), sum)
# Create list to contain results
pred.area <- list(c(reps = reps, threshold = threshold, pred.area = current.area))
# Conditional statements to add elements to the list
if(climate == TRUE) pred.area$climate <- data.frame(low_26 = numeric(1), mid_45 = numeric(1), high_60 = numeric(1), max_80 = numeric(1))
if(sea == TRUE) pred.area$sea <- data.frame(sea = numeric(1), sea.low_26 = numeric(1), sea.mid_45 = numeric(1), sea.high_60 = numeric(1), sea.max_80 = numeric(reps))
if(develop == TRUE) pred.area$develop <- data.frame(develop = numeric(reps), dev.low_26 = numeric(reps), dev.mid_45 = numeric(reps), dev.high_60 = numeric(reps), dev.max_80 = numeric(reps))
if(fire == TRUE) pred.area$fire <- data.frame(fire = numeric(reps), dev.low_26 = numeric(reps), dev.mid_45 = numeric(reps), dev.high_60 = numeric(reps), dev.max_80 = numeric(reps))
if(all == TRUE) pred.area$all <- data.frame(sea.dev = numeric(reps), sea.fire = numeric(reps), dev.fire = numeric(reps), sea.dev.fire = numeric(reps), all.low_26 = numeric(reps), all.mid_45 = numeric(reps), all.high_60 = numeric(reps), all.max_80 = numeric(reps))
#Calculate predicted areas under scenarios
#Climate - single values
if(climate == TRUE){
# Predict suitability across area
low_26 <- climate.fun(model, stack("Climate/low_26.grd"))
mid_45 <- climate.fun(model, stack("Climate/mid_45.grd"))
high_60 <- climate.fun(model, stack("Climate/high_60.grd"))
max_80 <- climate.fun(model, stack("Climate/max_80.grd"))
# Calculate proportion of island predicted
pred.area$climate$low_26 <- cellStats(reclassify(low_26, thresh.rcl), sum)
pred.area$climate$mid_45 <- cellStats(reclassify(mid_45, thresh.rcl), sum)
pred.area$climate$high_60 <- cellStats(reclassify(high_60, thresh.rcl), sum)
pred.area$climate$max_80 <- cellStats(reclassify(max_80, thresh.rcl), sum)
rm(low_26, mid_45, high_60, max_80)
}
# Sea level change
if(sea == TRUE){
# Mask initial predictions by sea level change
sea.mask <- pred.current + sea.lvl
pred.area$sea$sea <- cellStats(reclassify(sea.mask, thresh.rcl), sum)
# Create future scenarios and mask by sea level
sea.map <- climate.fun(model, stack("Climate/low_26.grd"))
sea.mask <- sea.map + sea.lvl
pred.area$sea$sea.low_26 <- cellStats(reclassify(sea.mask, thresh.rcl), sum)
sea.map <- climate.fun(model, stack("Climate/mid_45.grd"))
sea.mask <- sea.map + sea.lvl
pred.area$sea$sea.mid_45 <- cellStats(reclassify(sea.mask, thresh.rcl), sum)
sea.map <- climate.fun(model, stack("Climate/high_60.grd"))
sea.mask <- sea.map + sea.lvl
pred.area$sea$sea.high_60 <- cellStats(reclassify(sea.mask, thresh.rcl), sum)
sea.map <- climate.fun(model, stack("Climate/max_80.grd"))
sea.mask <- sea.map + sea.lvl
pred.area$sea$sea.max_80 <- cellStats(reclassify(sea.mask, thresh.rcl), sum)
rm(sea.map, sea.mask)
}
# Development
if(develop == TRUE){
low_26 <- climate.fun(model, stack("Climate/low_26.grd"))
mid_45 <- climate.fun(model, stack("Climate/mid_45.grd"))
high_60 <- climate.fun(model, stack("Climate/high_60.grd"))
max_80 <- climate.fun(model, stack("Climate/max_80.grd"))
for(i in 1:reps){
# Simulate development with default values
dev.mask <- development(cov)
# Use simulated development to mask climate predictions
pred.area$develop$develop[i] <- cellStats(reclassify(reclassify(pred.current, thresh.rcl) - dev.mask, matrix(c(-1,0,0), nrow=1, ncol=3, byrow=T) ), sum)
pred.area$develop$dev.low_26[i] <- cellStats(reclassify(reclassify(low_26, thresh.rcl) - dev.mask, matrix(c(-1,0,0), nrow=1, ncol=3, byrow=T)), sum)
pred.area$develop$dev.mid_45[i] <- cellStats(reclassify(reclassify(mid_45, thresh.rcl) - dev.mask, matrix(c(-1,0,0), nrow=1, ncol=3, byrow=T)), sum)
pred.area$develop$dev.high_60[i] <- cellStats(reclassify(reclassify(high_60, thresh.rcl) - dev.mask, matrix(c(-1,0,0), nrow=1, ncol=3, byrow=T)), sum)
pred.area$develop$dev.max_80[i] <- cellStats(reclassify(reclassify(max_80, thresh.rcl) - dev.mask, matrix(c(-1,0,0), nrow=1, ncol=3, byrow=T)), sum)
}
rm(low_26, mid_45, high_60, max_80)
}
# Wildfire
if(fire == TRUE){
low_26 <- climate.fun(model, stack("Climate/low_26.grd"))
mid_45 <- climate.fun(model, stack("Climate/mid_45.grd"))
high_60 <- climate.fun(model, stack("Climate/high_60.grd"))
max_80 <- climate.fun(model, stack("Climate/max_80.grd"))
for(i in 1:reps){
# Simulate fire with default values
fire.dis <- fire.risk(cov)
fire.dis <- reclassify(fire.dis, matrix(c(-1,0.99999,0, 0.999999, 1, 1), nrow=2, ncol=3, byrow=T))
# Use simulated development to mask climate predictions
pred.area$develop$develop[i] <- cellStats(reclassify(reclassify(pred.current, thresh.rcl) - fire.dis, matrix(c(-1,0,0), nrow=1, ncol=3, byrow=T)), sum)
pred.area$develop$dev.low_26[i] <- cellStats(reclassify(reclassify(low_26, thresh.rcl) - fire.dis, matrix(c(-1,0,0), nrow=1, ncol=3, byrow=T)), sum)
pred.area$develop$dev.mid_45[i] <- cellStats(reclassify(reclassify(mid_45, thresh.rcl) - fire.dis, matrix(c(-1,0,0), nrow=1, ncol=3, byrow=T)), sum)
pred.area$develop$dev.high_60[i] <- cellStats(reclassify(reclassify(high_60, thresh.rcl) - fire.dis, matrix(c(-1,0,0), nrow=1, ncol=3, byrow=T)), sum)
pred.area$develop$dev.max_80[i] <- cellStats(reclassify(reclassify(max_80, thresh.rcl) - fire.dis, matrix(c(-1,0,0), nrow=1, ncol=3, byrow=T)), sum)
}
rm(low_26, mid_45, high_60, max_80)
}
# All
if(all == TRUE){
low_26 <- climate.fun(model, stack("Climate/low_26.grd"))
mid_45 <- climate.fun(model, stack("Climate/mid_45.grd"))
high_60 <- climate.fun(model, stack("Climate/high_60.grd"))
max_80 <- climate.fun(model, stack("Climate/max_80.grd"))
for(i in 1:reps){
# Reclassify prediction
current.bin <- reclassify(pred.current, thresh.rcl)
low_26 <- reclassify(low_26, thresh.rcl)
mid_45 <- reclassify(mid_45, thresh.rcl)
high_60 <- reclassify(high_60, thresh.rcl)
max_80 <- reclassify(max_80, thresh.rcl)
# Simulate development with default values
dev.mask <- development(cov)
# Simulate fire with default values
fire.dis <- fire.risk(cov)
fire.dis <- reclassify(fire.dis, matrix(c(-1,0.99999,0, 0.999999, 1, 1), nrow=2, ncol=3, byrow=T))
# Sea level and development
mask <- current.bin + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1,0,0)))
pred.area$all$sea.dev[i] <- cellStats(mask, sum)
# Sea level and fire
mask <- current.bin + sea.lvl
mask <- reclassify(mask - fire.dis, matrix(c(-1,0,0)))
pred.area$all$sea.fire[i] <- cellStats(mask, sum)
# Sea level, development and fire
# Current values
mask <- current.bin + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1,0,0)))
mask <- reclassify(mask - fire.dis, matrix(c(-1,0,0)))
pred.area$all$sea.dev[i] <- cellStats(mask, sum)
# Low_26
mask <- low_26 + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1,0,0)))
mask <- reclassify(mask - fire.dis, matrix(c(-1,0,0)))
pred.area$all$all.low_26[i] <- cellStats(mask, sum)
# Mid_45
mask <- mid_45 + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1,0,0)))
mask <- reclassify(mask - fire.dis, matrix(c(-1,0,0)))
pred.area$all$all.mid_45[i] <- cellStats(mask, sum)
# High_60
mask <- high_60 + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1,0,0)))
mask <- reclassify(mask - fire.dis, matrix(c(-1,0,0)))
pred.area$all$all.high_60[i] <- cellStats(mask, sum)
# Max_80
mask <- max_80 + sea.lvl
mask <- reclassify(mask - dev.mask, matrix(c(-1,0,0)))
mask <- reclassify(mask - fire.dis, matrix(c(-1,0,0)))
pred.area$all$all.max_80[i] <- cellStats(mask, sum)
}
rm(low_26, mid_45, high_60, max_80, mask, dev.mask, fire.dis)
}
return(simulation.predictions = pred.area)
}
future(dove.avg, reps=3)
